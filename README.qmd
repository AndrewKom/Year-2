---
title: "Практическая работа 1"
format: html
editor: visual
---

## Цель работы

1.  Познакомиться с языком R
2.  Пройти обучающие уроки в swirl

## Исходные данные

1.  ОС Windows
2.  Библиотека swirl
3.  RStudio

## План

1.  Скачать R и RStudio
2.  Подключить swirl
3.  Пройти первые 4 учебных задания
4.  Создать отчет

## Описание шагов:

1.  Воспользуемся RStudio

2.  Заходим в Packages и устанавливаем swirl

3.  Проходим первый урок: Basic Building Blocks

    Начало первого урока:

![](images/image-1457903474.png)

    In its simplest form, R can be used as an interactive calculator. Type 5 + 7 and press Enter

```{r}
5+7
```

    | Type x <- 5 + 7. It's important to include a single space on each side of the assignment operator, but do NOT put a space between the
    | `<` and the `-` that form the arrow.

```{r}
x<-5+7
```

    | Type y <- x - 3 and press Enter. Whether you use x - 3 or x-3 is personal preference, but it's good habit to include a space on either
    | side of the assignment operator.

```{r}
y<- x-3
```

    | The easiest way to create a vector is with the c() function, which stands for 'concatenate' or 'combine'. To create a vector containing
    | the numbers 1.1, 9, and 3.14, type c(1.1, 9, 3.14). Try it now and store the result in a variable called z.

```{r}
z<- c(1.1,9,3.14)
```

    | Anytime you have questions about a particular function, you can access R's built-in help files via the `?` command. For example, if you
    | want more information on the c() function, type ?c without the parentheses that normally follow a function name. Give it a try.

```{r}
?c
```

    | You can combine vectors to make a new vector. Create a new vector that contains z, 555, then z again in that order. Don't assign this
    | vector to a new variable, so that we can just see the result immediately.

```{r}
c(z,555,z)
```

    | Numeric vectors can be used in arithmetic expressions. Type the following to see what happens: z * 2 + 100

```{r}
z*2+100
```

    | Take the square root of z - 1 and assign it to a new variable called my_sqrt.

```{r}
my_sqrt<-sqrt(z-1)
```

    | Assign the result of sqrt(z - 1) to a variable called my_sqrt.

```{r}
my_sqrt<-sqrt(z-1)
```

    | Before we view the contents of the my_sqrt variable, what do you think it contains?

    1: a vector of length 3
    2: a single number (i.e a vector of length 1)
    3: a vector of length 0 (i.e. an empty vector)

    Выбор:1

    | Now, create a new variable called my_div that gets the value of z divided by my_sqrt.

```{r}
my_div<-z/my_sqrt
```

    | Which statement do you think is true?

    1: my_div is undefined
    2: my_div is a single number (i.e a vector of length 1)
    3: The first element of my_div is equal to the first element of z divided by the first element of my_sqrt, and so on...

    Выбор:3

    | Keep up the great work!

    | To see another example of how this vector 'recycling' works, try adding c(1, 2, 3, 4) and c(0, 10). Don't worry about saving the result
    | in a new variable.

```{r}
c(1,2,3,4)+c(0,10)
```

    | Try c(1, 2, 3, 4) + c(0, 10, 100) for an example

```{r}
c(1, 2, 3, 4) + c(0, 10, 100)
```

    | Type c(1, 2, 3, 4) + c(0, 10, 100) to see how R handles adding two vectors, when the shorter vector's length does not divide evenly into
    | the longer vector's length. Don't worry about assigning the result to a variable.

    > c(1, 2, 3, 4) + c(0, 10, 100)
    [1]   1  12 103   4
    Warning message:
    In c(1, 2, 3, 4) + c(0, 10, 100) :
      longer object length is not a multiple of shorter object length

    | Keep up the great work!

    | In many programming environments, the up arrow will cycle through previous commands. Try hitting the up arrow on your keyboard until you
    | get to this command (z * 2 + 100), then change 100 to 1000 and hit Enter. If the up arrow doesn't work for you, just type the corrected
    | command.

```{r}
z*2+1000
```

    | You can type the first two letters of the variable name, then hit the Tab key (possibly more than once). Most programming environments
    | will provide a list of variables that you've created that begin with 'my'. This is called auto-completion and can be quite handy when you
    | have many variables in your workspace. Give it a try. (If auto-completion doesn't work for you, just type my_div and press Enter.)

    > 
    > my_div
    [1] 3.478505 3.181981 2.146460

    | You nailed it! Good job!

      |======================================================| 100%
    | Would you like to receive credit for completing this course on Coursera.org?

Сообщение о выполнении первого курса

![](images/image-1796296961.png)

Конец первого урока

4.  Начало второго курса

![](images/image-1139552407.png)

    | Determine which directory your R session is using as its current working directory using getwd().

getwd()

    [1] "C:/PracZahar/Zahar"

    | Now take a look at objects that are in your workspace using ls().

ls()

    [1] "my_div"  "my_sqrt" "v"       "x"       "y"       "z"

    Assign 9 to x using x <- 9.

```{r}
x<-9
```

    | Now take a look at objects that are in your workspace using ls().

ls

     List all the files in your working directory using list.files() or dir().

dir()

    "_quarto.yml" "about.qmd"   "docs"        "index.qmd"   "styles.css"  "Zahar.Rproj"

    | As we go through this lesson, you should be examining the help page for each new function. Check out the help page for list.files with
    | the command ?list.files.

?list.files\
args(list.files)

    function (path = ".", pattern = NULL, all.files = FALSE, full.names = FALSE, 
        recursive = FALSE, ignore.case = FALSE, include.dirs = FALSE, 
        no.. = FALSE) 
    NULL

    | Assign the value of the current working directory to a variable called "old.dir".

old.dir \<- getwd()

    | Use dir.create() to create a directory in the current working directory called "testdir".

dir.create("testdir")

     Set your working directory to "testdir" with the setwd() command.

setwd("testdir")

    | Create a file in your working directory called "mytest.R" using the file.create() function.

file.create("mytest.R")

    [1] TRUE

    | This should be the only file in this newly created directory. Let's check this by listing all the files in the current directory.

list.files()

```{r}

```

```{r}

```

```{r}

```

```{r}

```

```{r}

```

```{r}

```

```{r}

```

```{r}

```

```{r}

```

```{r}

```

## Оценка результатов

Задача выполнена при помощи приложения RStudio, удалось познакомится с его функционалом и особенностями.

## Вывод

В данной работе я смог познакомиться с языком R и выполнить учебные задания по swirl.
